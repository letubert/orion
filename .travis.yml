language: rust
sudo: required
dist: trusty
services: docker
addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - cmake
      - gcc
      - binutils-dev
      - libiberty-dev
cache: cargo

matrix:
  include:
    - rust: stable
      install:
        - cargo install --force cargo-audit
      script:
        - cargo clean
        - cargo test
        - cargo test --release
        - cargo test --tests --no-default-features
        - cargo audit
    - rust: nightly
      script:
        - rustup component add rustfmt-preview
        - cargo clean
        - cargo fmt --all -- --check
        # Debug mode:
        # First sanitizers with default features
        - RUSTFLAGS="-Z sanitizer=address" ASAN_OPTIONS="detect_odr_violation=0" cargo test --tests --target x86_64-unknown-linux-gnu
        - RUSTFLAGS="-Z sanitizer=leak" cargo +nightly test --tests --target x86_64-unknown-linux-gnu
        # Then with nightly features
        - RUSTFLAGS="-Z sanitizer=address" ASAN_OPTIONS="detect_odr_violation=0" cargo test --no-default-features --features nightly --tests --target x86_64-unknown-linux-gnu
        - RUSTFLAGS="-Z sanitizer=leak" cargo test --no-default-features --features nightly --tests --target x86_64-unknown-linux-gnu
        # Release:
        # First sanitizers with default features
        - RUSTFLAGS="-Z sanitizer=address" ASAN_OPTIONS="detect_odr_violation=0" cargo test --tests --release --target x86_64-unknown-linux-gnu
        - RUSTFLAGS="-Z sanitizer=leak" cargo +nightly test --tests --release --target x86_64-unknown-linux-gnu
        # Then with nightly features
        - RUSTFLAGS="-Z sanitizer=address" ASAN_OPTIONS="detect_odr_violation=0" cargo test --no-default-features --features nightly --tests --release --target x86_64-unknown-linux-gnu
        - RUSTFLAGS="-Z sanitizer=leak" cargo test --no-default-features --features nightly --tests --release --target x86_64-unknown-linux-gnu
    # Ensure building in no_std is possible
    - env: TARGET=thumbv7em-none-eabi
      rust: nightly
      install:
        - cargo install xargo || true
        - rustup target install armv7-unknown-linux-gnueabihf
        - rustup component add rust-src
      script:
        - xargo build --no-default-features --features no_std --verbose --target $TARGET
    - env: TARGET=i686-unknown-linux-gnu
      rust: stable
      script:
        - cross test --target $TARGET
        - cross test --release --target $TARGET
    - env: TARGET=x86_64-apple-darwin
      os: osx
      rust: stable
      script:
        - cross test --target $TARGET
        - cross test --release --target $TARGET
    - env: TARGET=mips64-unknown-linux-gnuabi64
      rust: stable
      script:
        - cross test --target $TARGET
        - cross test --release --target $TARGET

after_success: |
  wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
  tar xzf master.tar.gz &&
  cd kcov-master &&
  mkdir build &&
  cd build &&
  cmake .. &&
  make &&
  make install DESTDIR=../../kcov-build &&
  cd ../.. &&
  rm -rf kcov-master &&
  for file in target/debug/examplerust-*[^\.d]; do mkdir -p "target/cov/$(basename $file)"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done &&
  bash <(curl -s https://codecov.io/bash) &&
  echo "Uploaded code coverage"
